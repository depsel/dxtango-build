{
  "version": 3,
  "sources": ["browser-route-module:routes/_admin.settings.company/route.tsx?browser", "../../../src/app/routes/_admin.settings.company/route.tsx", "../../../src/app/routes/_admin.settings.company/components/index.tsx", "../../../src/app/routes/_admin.settings.company/components/success.tsx", "../../../src/api-client/company/paths.ts", "../../../src/api-client/company/requests.tsx", "../../../src/app/routes/_admin.settings.company/validation.ts"],
  "sourcesContent": ["export { default } from \"./routes/_admin.settings.company/route.tsx\";", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src/app/routes/_admin.settings.company/route.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src/app/routes/_admin.settings.company/route.tsx\");\n  import.meta.hot.lastModified = \"1711474084153.158\";\n}\n// REMIX HMR END\n\nimport { useNavigate } from '@remix-run/react';\nimport { URL_SETTINGS_PATH } from 'src/config/url_paths';\nimport { SettingsFormHeading } from '~/components/SettingsFormHeading';\nimport { FormCompany } from './components';\nexport default function Company() {\n  _s();\n  const navigate = useNavigate();\n  return <>\n      <SettingsFormHeading title={'Empresa'} actionButton={{\n      label: 'Cancelar',\n      buttonProps: {\n        colorScheme: 'gray',\n        onClick: () => {\n          navigate(URL_SETTINGS_PATH);\n        }\n      }\n    }} />\n      <FormCompany />\n    </>;\n}\n_s(Company, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Company;\nvar _c;\n$RefreshReg$(_c, \"Company\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src/app/routes/_admin.settings.company/components/index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src/app/routes/_admin.settings.company/components/index.tsx\");\n  import.meta.hot.lastModified = \"1711474084152.74\";\n}\n// REMIX HMR END\n\nimport { Success } from './success';\nexport const FormCompany = () => {\n  return <Success />;\n};\n_c = FormCompany;\nvar _c;\n$RefreshReg$(_c, \"FormCompany\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src/app/routes/_admin.settings.company/components/success.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src/app/routes/_admin.settings.company/components/success.tsx\");\n  import.meta.hot.lastModified = \"1711639369237.8188\";\n}\n// REMIX HMR END\n\nimport { useEffect } from 'react';\nimport { useAppResources } from '#/app_resources/app_resources';\nimport { useTangoList } from '#/hooks/useTangoList';\nimport { promiseBasedToast } from '#/utils/promise_based_toast';\nimport { Box, Grid, GridItem, useToast } from '@chakra-ui/react';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { FetchStateError, FetchStateLoading, FetchStateSuccess } from '@core/react-hooks/useAxiosFetch';\nimport { useForm } from 'react-hook-form';\nimport { URL_SETTINGS_PATH } from 'src/config/url_paths';\nimport { API_DICTIONARY } from 'src/api-client/company/paths';\nimport { companyUpdateRequest } from 'src/api-client/company/requests';\nimport { CommonCard } from '~/components/CommonCard';\nimport { ControlledSelect } from '~/components/form_elements/ControlledSelect';\nimport { FormErrors } from '~/components/form_elements/FormErrors';\nimport { InlineError } from '~/components/InlineError';\nimport { SettingsFormsButtons } from '~/components/SettingsFormButtons';\nimport { yupValidationSchema } from '../validation';\nexport const Success = () => {\n  _s();\n  const app = useAppResources();\n  const toast = useToast();\n  const {\n    state: stateDictionary,\n    result: resultDictionary\n  } = useTangoList({\n    url: API_DICTIONARY,\n    fieldsMap: {\n      label: 'name',\n      value: 'db_name',\n      isActive: 'is_active'\n    }\n  });\n  const {\n    handleSubmit,\n    control,\n    reset,\n    setError,\n    formState: {\n      errors,\n      isSubmitting,\n      isSubmitSuccessful\n    }\n  } = useForm({\n    defaultValues: {\n      company: ''\n    },\n    resolver: yupResolver(yupValidationSchema)\n  });\n  const disableForm = isSubmitSuccessful || isSubmitting;\n  useEffect(() => {\n    // set the default value based on the isActive prop\n    if (stateDictionary instanceof FetchStateSuccess) {\n      const selectedIndex = resultDictionary.findIndex(x => x.isActive === true);\n      if (selectedIndex >= 0) {\n        reset({\n          company: resultDictionary[selectedIndex].value\n        });\n      }\n    }\n  }, [stateDictionary]);\n  const onSubmit = async data => {\n    const input = {\n      company: data.company\n    };\n    const result = await companyUpdateRequest(input, app);\n    await promiseBasedToast({\n      toast,\n      result,\n      messages: {\n        success: {\n          title: 'Empresa actualizada'\n        },\n        error: {\n          title: 'Ha ocurrido un error'\n        },\n        loading: {\n          title: 'Actualizando empresa'\n        }\n      }\n    }).then(() => {\n      app.navigate(URL_SETTINGS_PATH);\n    }).catch(e => {\n      setError('root', {\n        message: e\n      });\n    });\n  };\n  return <form noValidate onSubmit={handleSubmit(onSubmit)}>\n      <Box>\n        <FormErrors errors={errors} />\n        <CommonCard>\n          <Grid templateColumns={{\n          base: '1fr',\n          md: 'repeat(2,1fr)'\n        }} alignItems={'center'} gap={4}>\n            <GridItem>\n              <ControlledSelect fieldProps={{\n              name: 'company',\n              placeholder: 'Seleccione una empresa',\n              options: resultDictionary,\n              noOptionsMessage(obj) {\n                return 'No hay empresas disponibles';\n              },\n              selectedOptionStyle: 'check',\n              isLoading: stateDictionary instanceof FetchStateLoading\n            }} formControlProps={{\n              isDisabled: disableForm || !(stateDictionary instanceof FetchStateSuccess)\n            }} formControlInnerProps={{\n              label: 'Empresa activa'\n            }} control={control} />\n              {stateDictionary instanceof FetchStateError && <InlineError error={stateDictionary.errorOrNull().error} />}\n            </GridItem>\n            <GridItem></GridItem>\n          </Grid>\n        </CommonCard>\n        <CommonCard>\n          <SettingsFormsButtons isLoading={disableForm} />\n        </CommonCard>\n      </Box>\n    </form>;\n};\n_s(Success, \"z/JpWR+xvjeib9Jush9S0xXKkIE=\", false, function () {\n  return [useAppResources, useToast, useTangoList, useForm];\n});\n_c = Success;\nvar _c;\n$RefreshReg$(_c, \"Success\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "import { apiPath } from \"../shared\";\n\nexport const API_DICTIONARY = apiPath( '/dictionary' );\nexport const API_ACTIVE_COMPANY = apiPath( '/dictionary/active_company' );", "import { AppResources } from '#/app_resources/app_resources';\n\nimport { TangoCompanyInput } from 'src/domain/dictionary/inputs';\nimport { TangoCompanyResult } from 'src/domain/dictionary/results';\n\nimport { dxtApiRequest } from '../shared';\nimport { API_ACTIVE_COMPANY } from './paths';\n\nexport const companyUpdateRequest = async (\n  input: TangoCompanyInput,\n  app: AppResources\n) => {\n  return await dxtApiRequest<TangoCompanyResult, TangoCompanyInput>(\n    {\n      url: API_ACTIVE_COMPANY,\n      params: input,\n      method: 'POST',\n      silent: true,\n    },\n    app\n  );\n};\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"src/app/routes/_admin.settings.company/validation.ts\"\n);\nimport.meta.hot.lastModified = \"1711474084153.3284\";\n}\n// REMIX HMR END\n\nimport * as yup from 'yup';\n\nexport const yupValidationSchema = yup\n  .object({\n    company: yup.string().required('Seleccione una empresa activa'),\n  })\n  .required();\n"],
  "mappings": "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",
  "names": ["import_jsx_dev_runtime", "_c", "import_jsx_dev_runtime", "_s", "_c"]
}
