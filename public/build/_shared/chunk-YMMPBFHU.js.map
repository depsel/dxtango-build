{
  "version": 3,
  "sources": ["../../../src/code.client/crud_configs/users/index.tsx", "../../../src/api-client/dxt/user/requests.ts"],
  "sourcesContent": ["import { AppResources } from '#/app_resources/app_resources';\nimport { useDXTApiFetch, UseDXTApiFetchResult } from '#/hooks/useDXTApiFetch';\nimport { useTangoList } from '#/hooks/useTangoList';\nimport { SelectOptions } from '#/types';\n\nimport { Icon } from '@chakra-ui/react';\n\nimport { FetchState } from '@core/react-hooks/useAxiosFetch';\nimport AccountCancelIcon from 'mdi-react/AccountCancelIcon.js';\nimport {\n  URL_SETTINGS_CUSTOMERS_ADD_PATH,\n  URL_SETTINGS_CUSTOMERS_EDIT_PATH,\n  URL_SETTINGS_CUSTOMERS_PATH,\n  URL_SETTINGS_VENDORS_ADD_PATH,\n  URL_SETTINGS_VENDORS_EDIT_PATH,\n  URL_SETTINGS_VENDORS_PATH,\n} from 'src/config/url_paths';\nimport {\n  InsertClienteInput,\n  InsertVendedorInput,\n  UpdateClienteInput,\n  UpdateVendedorInput,\n} from 'src/domain/dxt/inputs';\nimport { DeleteUserInput } from 'src/domain/dxt/inputs/user';\nimport { DXTClienteResult, DXTVendedorResult } from 'src/domain/dxt/results';\nimport { DXTErrorInfo } from 'src/domain/shared/errors';\nimport { TangoClienteResult, TangoVendedorResult } from 'src/domain/tango/results';\nimport { UserMinimalInfoResult } from 'src/domain/user/results';\nimport { DXTApiRequestState } from 'src/api-client/shared';\nimport {\n  API_TANGO_CLIENTE,\n  API_TANGO_VENDEDOR,\n} from 'src/api-client/tango/paths';\nimport {\n  API_DXT_CUSTOMERS,\n  API_DXT_CUSTOMERS_ID,\n  API_DXT_VENDORS,\n  API_DXT_VENDORS_ID,\n} from 'src/api-client/dxt/user/paths';\nimport {\n  customerCreateRequest,\n  customerDeleteRequest,\n  customerUpdateRequest,\n  vendorCreateRequest,\n  vendorDeleteRequest,\n  vendorUpdateRequest,\n} from 'src/api-client/dxt/user/requests';\n\nexport type UserTypeSelector = 'cliente' | 'vendedor';\n\n// TODO: Typings.......\ninterface FormListsApiSettings {\n  getAll: () => UseDXTApiFetchResult<UserMinimalInfoResult, any>;\n\n  getOne: (\n    id: string\n  ) => UseDXTApiFetchResult<DXTClienteResult | DXTVendedorResult, any>;\n\n  getRelation: () => {\n    state: FetchState<TangoClienteResult[] | TangoVendedorResult[], any, DXTErrorInfo>;\n    result: SelectOptions[];\n  };\n\n  post: (\n    input: InsertClienteInput | InsertVendedorInput,\n    app: AppResources\n  ) => Promise<\n    DXTApiRequestState<\n      DXTClienteResult,\n      InsertClienteInput | InsertVendedorInput\n    >\n  >;\n\n  patch: (\n    id: number,\n    input: UpdateClienteInput | UpdateVendedorInput,\n    app: AppResources\n  ) => Promise<\n    DXTApiRequestState<\n      DXTClienteResult,\n      UpdateClienteInput | UpdateVendedorInput\n    >\n  >;\n\n  delete: (\n    id: number,\n    input: DeleteUserInput,\n    app: AppResources\n  ) => Promise<DXTApiRequestState<{ ok: boolean }, DeleteUserInput>>;\n}\n\ninterface Titles {\n  common: string;\n  create: string;\n  edit: string;\n}\n\nexport interface FormListsSettings {\n  api: FormListsApiSettings;\n  userType: UserTypeSelector;\n  titles: Titles;\n  actionButtonNavigateTo: string;\n  editButtonNavigateTo: string;\n  cancelButtonNavigateTo?: string;\n  tangoRelatedFields?: Record<string, string>;\n}\n\nexport interface SettingsProps {\n  customers: FormListsSettings;\n  vendors: FormListsSettings;\n}\n\nexport const settings: SettingsProps = {\n  customers: {\n    api: {\n      getAll: () => {\n        return useDXTApiFetch<UserMinimalInfoResult>({\n          url: API_DXT_CUSTOMERS,\n          silent: true,\n        });\n      },\n\n      getOne: (id: string) => {\n        return useDXTApiFetch<DXTClienteResult>({\n          url: API_DXT_CUSTOMERS_ID,\n          pathParams: { id },\n          silent: true,\n        });\n      },\n\n      getRelation: () => {\n        return useTangoList<TangoClienteResult[]>({\n          url: API_TANGO_CLIENTE,\n          fieldsMap: {\n            label: 'screen_name',\n            value: 'id',\n            isEnabled: 'habilitado',\n          },\n          disabledIcon: (\n            <Icon as={AccountCancelIcon} color='red.400' ml={2} boxSize={5} />\n          ),\n        });\n      },\n\n      post: async (input, app) => {\n        return customerCreateRequest(input, app);\n      },\n\n      patch: async (id, input, app) => {\n        return customerUpdateRequest(id as unknown as string, input, app);\n      },\n\n      delete: async (id, input, app) => {\n        return customerDeleteRequest(id as unknown as string, input, app);\n      },\n    },\n    userType: 'cliente',\n    titles: {\n      common: 'Gesti\u00F3n de Clientes',\n      create: 'Crear Cliente',\n      edit: 'Editar Cliente',\n    },\n    actionButtonNavigateTo: URL_SETTINGS_CUSTOMERS_ADD_PATH,\n    cancelButtonNavigateTo: URL_SETTINGS_CUSTOMERS_PATH,\n    editButtonNavigateTo: URL_SETTINGS_CUSTOMERS_EDIT_PATH,\n    tangoRelatedFields: {\n      placeholder: 'Seleccione un Cliente',\n      label: 'Cliente Tango',\n      empty: 'No hay clientes disponibles',\n    },\n  },\n  vendors: {\n    api: {\n      getAll: () => {\n        return useDXTApiFetch<UserMinimalInfoResult>({\n          url: API_DXT_VENDORS,\n          silent: true,\n        });\n      },\n\n      getOne: (id: string) => {\n        return useDXTApiFetch<DXTVendedorResult>({\n          url: API_DXT_VENDORS_ID,\n          pathParams: { id },\n          silent: true,\n        });\n      },\n\n      getRelation: () => {\n        return useTangoList<TangoVendedorResult[]>({\n          url: API_TANGO_VENDEDOR,\n          fieldsMap: {\n            label: 'screen_name',\n            value: 'id',\n            isEnabled: 'habilitado',\n          },\n          disabledIcon: (\n            <Icon as={AccountCancelIcon} color='red.400' ml={2} boxSize={5} />\n          ),\n        });\n      },\n\n      post: async (input, app) => {\n        return vendorCreateRequest(input, app);\n      },\n\n      patch: async (id, input, app) => {\n        return vendorUpdateRequest(id as unknown as string, input, app);\n      },\n\n      delete: async (id, input, app) => {\n        return vendorDeleteRequest(id as unknown as string, input, app);\n      },\n    },\n    userType: 'vendedor',\n    titles: {\n      common: 'Gesti\u00F3n de Vendedores',\n      create: 'Crear Vendedor',\n      edit: 'Editar Vendedor',\n    },\n    actionButtonNavigateTo: URL_SETTINGS_VENDORS_ADD_PATH,\n    cancelButtonNavigateTo: URL_SETTINGS_VENDORS_PATH,\n    editButtonNavigateTo: URL_SETTINGS_VENDORS_EDIT_PATH,\n    tangoRelatedFields: {\n      placeholder: 'Seleccione un Vendedor',\n      label: 'Vendedor Tango',\n      empty: 'No hay vendedores disponibles',\n    },\n  },\n};\n", "import { AppResources } from '#/app_resources/app_resources';\n\nimport { InsertClienteInput, InsertVendedorInput, UpdateClienteInput, UpdateVendedorInput } from 'src/domain/dxt/inputs';\nimport { DeleteUserInput } from 'src/domain/dxt/inputs/user';\nimport { DXTClienteResult } from 'src/domain/dxt/results';\n\nimport { dxtApiRequest } from '../../shared';\nimport { API_DXT_CUSTOMERS, API_DXT_CUSTOMERS_ID, API_DXT_VENDORS, API_DXT_VENDORS_ID } from './paths';\n\n\nexport const customerCreateRequest = async (input: InsertClienteInput, app: AppResources) => {\n  return await dxtApiRequest<DXTClienteResult, InsertClienteInput>(\n    {\n      url: API_DXT_CUSTOMERS,\n      data: input,\n      method: 'POST',\n      silent: true,\n    },\n    app\n  );\n};\n\nexport const customerUpdateRequest = async (id: string, input: UpdateClienteInput, app: AppResources) => {\n  return await dxtApiRequest<DXTClienteResult, UpdateClienteInput>(\n    {\n      url: API_DXT_CUSTOMERS_ID,\n      pathParams: { id },\n      data: input,\n      method: 'PATCH',\n      silent: true,\n    },\n    app\n  );\n};\n\nexport const customerDeleteRequest = async (id: string, input: DeleteUserInput, app: AppResources) =>\n  await dxtApiRequest<{ ok: boolean }, DeleteUserInput>(\n    {\n      url: API_DXT_CUSTOMERS_ID,\n      pathParams: { id },\n      data: input,\n      method: 'DELETE',\n      silent: true,\n    },\n    app\n  );\n\n/*\n * Vendors\n */\n\nexport const vendorCreateRequest = async (input: InsertVendedorInput, app: AppResources) => {\n  return await dxtApiRequest<DXTClienteResult, InsertVendedorInput>(\n    {\n      url: API_DXT_VENDORS,\n      data: input,\n      method: 'POST',\n      silent: true,\n    },\n    app\n  );\n};\n\nexport const vendorDeleteRequest = async (id: string, input: DeleteUserInput, app: AppResources) =>\n  await dxtApiRequest<{ ok: boolean }, DeleteUserInput>(\n    {\n      url: API_DXT_VENDORS_ID,\n      pathParams: { id },\n      data: input,\n      method: 'DELETE',\n      silent: true,\n    },\n    app\n  );\n\nexport const vendorUpdateRequest = async (id: string, input: UpdateVendedorInput, app: AppResources) => {\n  return await dxtApiRequest<DXTClienteResult, UpdateVendedorInput>(\n    {\n      url: API_DXT_VENDORS_ID,\n      pathParams: { id },\n      data: input,\n      method: 'PATCH',\n      silent: true,\n    },\n    app\n  );\n};\n"],
  "mappings": "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",
  "names": ["AccountCancelIcon"]
}
