{
  "version": 3,
  "sources": ["../../../src/code.client/hooks/useDXTApiFetch.ts", "../../../src/@core/react-hooks/useAxiosFetch.ts"],
  "sourcesContent": ["import { useEffect } from 'react';\n\nimport {\n  type FetchState,\n  FetchStateError,\n  useAxiosFetch,\n} from '@/react-hooks/useAxiosFetch';\n\nimport {\n  type DXTErrorInfo,\n  exceptionToDXTErrorInfo,\n} from 'src/domain/shared/errors';\n\nimport {\n  createDXTApiParams,\n  type DXTApiRequestConfig,\n} from 'src/api-client/shared/dxtApiRequest';\n\nimport { useBasicAppResources } from '../app_resources/basic_app_resources';\nimport { checkTokenErrorAndRedirect } from '../auth/utils';\n\n\nexport interface UseDXTApiFetchResult<T, D> {\n  state: FetchState<T, D, DXTErrorInfo>;\n  retry: () => Promise<void>;\n}\n\n/// **************************************************************************\n///\n/// useCloudFetch\n///\n/// <T> Data return type\n/// <D> Post input data type\n///\n/// **************************************************************************\n\nexport function useDXTApiFetch<T = any, D = any>(\n  params: DXTApiRequestConfig<D>\n): UseDXTApiFetchResult<T, D> {\n  const app = useBasicAppResources();\n  const retryCallback = app.retryCallback;\n\n  /* avoid multiple retries when server response is a 500 error without any error specs */\n\n  const dxtApiParams = createDXTApiParams(app, params);\n\n  const { state, retry } = useAxiosFetch<T, D, DXTErrorInfo>(\n    dxtApiParams,\n    (axiosError) => {\n      return exceptionToDXTErrorInfo(axiosError);\n    }\n  );\n\n  useEffect(() => {\n    (async () => {\n      const isSilent = params?.silent ?? false;\n\n      if (isSilent) return;\n\n      if (!(state instanceof FetchStateError)) return;\n\n      // client network errors shouldn't be handled by the modal\n      // only if it has never been retried before\n\n      const stateError: DXTErrorInfo = state.error;\n\n      // is this a token error? go and log back in\n      const isTokenError = await checkTokenErrorAndRedirect(app, stateError.status);\n      if (isTokenError) return;\n\n      if (\n        retryCallback &&\n        (await retryCallback({\n          message: stateError.error,\n        }))\n      )\n\n      retry();\n    })();\n  }, [state]);\n\n  return {\n    state,\n    retry,\n  };\n}\n", "// ** React Imports\nimport { useEffect, useState } from 'react';\n\nimport {\n  AxiosError,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from 'axios';\n\nimport {\n  axiosRequestPlus,\n  AxiosRequestPlusError,\n} from '../axios/axiosRequestPlus';\nimport { IfEqual } from '../typescript';\n\n/// **************************************************************************\n///\n/// FetchState classes\n///\n/// **************************************************************************\ntype FetchStateMapFunction<T, D, E, S extends FetchState<T, D, E>, R> = (\n  state: S\n) => R;\n\nexport abstract class FetchState<T, D = any, E = AxiosError<T, D>> {\n  constructor(public readonly originalRequest: AxiosRequestConfig<D>) {}\n\n  mapOrElse<R>(options: {\n    loading?: FetchStateMapFunction<T, D, E, FetchStateLoading<T, D, E>, R>;\n    success?: FetchStateMapFunction<T, D, E, FetchStateSuccess<T, D, E>, R>;\n    error?: FetchStateMapFunction<T, D, E, FetchStateError<T, D, E>, R>;\n    orElse: FetchStateMapFunction<T, D, E, FetchState<T, D, E>, R>;\n  }): R {\n    const { loading, success, error, orElse } = options;\n\n    if (this instanceof FetchStateLoading && loading) return loading(this);\n    if (this instanceof FetchStateSuccess && success) return success(this);\n    if (this instanceof FetchStateError && error) return error(this);\n\n    return orElse(this);\n  }\n\n  map<R>(options: {\n    loading: FetchStateMapFunction<T, D, E, FetchStateLoading<T, D, E>, R>;\n    success: FetchStateMapFunction<T, D, E, FetchStateSuccess<T, D, E>, R>;\n    error: FetchStateMapFunction<T, D, E, FetchStateError<T, D, E>, R>;\n  }): R {\n    const { loading, success, error } = options;\n\n    return this.mapOrElse({\n      loading,\n      success,\n      error,\n      orElse: (_) => {\n        throw Error('Invalid useAxiosFetch state');\n      },\n    });\n  }\n\n  public isLoading(): this is FetchStateLoading<T, D, E> {\n    return this instanceof FetchStateLoading;\n  }\n\n  public isSuccess(): this is FetchStateSuccess<T, D, E> {\n    return this instanceof FetchStateSuccess;\n  }\n\n  public isError(): this is FetchStateError<T, D, E> {\n    return this instanceof FetchStateError;\n  }\n\n  public errorOrNull(): E | null {\n    if (this instanceof FetchStateError) return this.error;\n    return null;\n  }\n\n  public callIfLoading<R>(\n    func: FetchStateMapFunction<T, D, E, FetchStateLoading<T, D, E>, boolean>\n  ): boolean {\n    return this instanceof FetchStateLoading ? func(this) ?? false : false;\n  }\n\n  public callIfSuccess(\n    func: FetchStateMapFunction<T, D, E, FetchStateSuccess<T, D, E>, boolean>\n  ): boolean {\n    return this instanceof FetchStateSuccess ? func(this) ?? false : false;\n  }\n\n  public callIfError<R>(\n    func: FetchStateMapFunction<T, D, E, FetchStateError<T, D, E>, boolean>\n  ): boolean {\n    return this instanceof FetchStateError ? func(this) ?? false : false;\n  }\n}\n\nexport class FetchStateLoading<T, D, E = AxiosError<T, D>> extends FetchState<\n  T,\n  D,\n  E\n> {\n  constructor(originalRequest: AxiosRequestConfig<D>) {\n    super(originalRequest);\n  }\n}\n\nexport class FetchStateError<T, D, E = AxiosError<T, D>> extends FetchState<\n  T,\n  D,\n  E\n> {\n  constructor(\n    public readonly error: E,\n    originalRequest: AxiosRequestConfig<D>\n  ) {\n    super(originalRequest);\n  }\n}\n\nexport class FetchStateSuccess<T, D, E = AxiosError<T, D>> extends FetchState<\n  T,\n  D,\n  E\n> {\n  constructor(\n    public readonly data: T,\n    originalRequest: AxiosRequestConfig<D>\n  ) {\n    super(originalRequest);\n  }\n}\n\n/// **************************************************************************\n///\n/// useFetch\n///\n/// <T> Data return type\n/// <D> Post input data type\n/// <E> Error return type\n///\n/// **************************************************************************\n\nexport type UseFetchErrorCallback<T, D, E> = (\n  error: FetchStateError<T, D, E>\n) => void;\n\nexport type UseFetchErrorParser<T, D, E> = (axiosError: AxiosError<T, D>) => E;\n\nexport interface UseFetchResult<T, D, E> {\n  state: FetchState<T, D, E>;\n  retry: () => Promise<void>;\n}\n\nexport const USE_FETCH_RETRY_CALL_ERROR =\n  'Retry call requires FetchStateError state';\n\nexport function useAxiosFetch<T = any, D = any, E = AxiosError<T, D>>(\n  params: AxiosRequestConfig<D>,\n  ...args: IfEqual<E, AxiosError<T, D>, [], [UseFetchErrorParser<T, D, E>]>\n): UseFetchResult<T, D, E> {\n  // ** States\n  const [fetchState, setFetchState] = useState<FetchState<T, D, E>>(\n    new FetchStateLoading(params)\n  );\n\n  /******************************\n   * Send Request\n   ******************************/\n  const retry = async () => {\n    setFetchState(new FetchStateLoading(fetchState.originalRequest));\n\n    await makeRequest();\n  };\n\n  const makeRequest = async () => {\n    const params = fetchState.originalRequest;\n\n    try {\n      const response: AxiosResponse<T | { data?: T }, D> = await axiosRequestPlus<\n        T | { data?: T },\n        AxiosResponse<T | { data?: T }, D>,\n        D\n      >(params);\n\n      const data: T = (response?.data as any)?.data ?? response?.data;\n\n      setFetchState(new FetchStateSuccess(data, params));\n\n    } catch (err: any) {\n      if (err instanceof AxiosRequestPlusError) {\n        const axiosError: AxiosError<T, D> = err as any;\n\n        const [errorParser] = args;\n\n        const parsedError: E = errorParser\n          ? errorParser(axiosError)\n          : (axiosError as unknown as E);\n\n        const stateError = new FetchStateError<T, D, E>(parsedError, params);\n\n        setFetchState(stateError);\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  useEffect(() => {\n    makeRequest();\n  }, []);\n\n  return {\n    state: fetchState,\n    retry,\n  };\n}\n"],
  "mappings": "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",
  "names": ["import_react", "params"]
}
