{
  "version": 3,
  "sources": ["../../../src/app/components/form_elements/ControlledInput.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src/app/components/form_elements/ControlledInput.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src/app/components/form_elements/ControlledInput.tsx\");\n  import.meta.hot.lastModified = \"1711474084152.1123\";\n}\n// REMIX HMR END\n\nimport { FormControl, FormHelperText, FormLabel, Input, InputGroup } from '@chakra-ui/react';\nimport { useController } from 'react-hook-form';\nexport const ControlledInput = props => {\n  _s();\n  const {\n    fieldProps,\n    formControlProps,\n    formControlInnerProps,\n    control\n  } = props;\n  const {\n    field: {\n      ref,\n      onChange,\n      value\n    },\n    fieldState: {\n      invalid\n    },\n    formState: {\n      errors\n    }\n  } = useController({\n    name: fieldProps.name,\n    control\n  });\n  const {\n    label,\n    helperText,\n    icon\n  } = formControlInnerProps || {};\n  return <FormControl {...formControlProps} isInvalid={invalid}>\n      {label != null && <FormLabel htmlFor={fieldProps.name} sx={fieldProps.variant === 'flushed' ? {\n      fontSize: 'sm',\n      mb: 0\n    } : {}}>\n          {label}\n        </FormLabel>}\n      <InputGroup>\n        {icon}\n        <Input {...fieldProps} onChange={onChange} value={value} ref={ref} />\n      </InputGroup>\n      {helperText != null && <FormHelperText>{helperText}</FormHelperText>}\n      {/* {errors != null && (\n        <FormErrorMessage>\n          <ErrorMessage name={'singleErrorInput'} errors={errors} />\n        </FormErrorMessage>\n       )} */}\n    </FormControl>;\n};\n_s(ControlledInput, \"uRgZyAx1xb4ZgjH2sncQ3yv6Uxk=\", false, function () {\n  return [useController];\n});\n_c = ControlledInput;\nvar _c;\n$RefreshReg$(_c, \"ControlledInput\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAqDwB;AApDxB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,2DAA6D,EAAE;AAAA,EACxG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAsD;AACtD,cAAY,IAAI,eAAe;AACjC;AAKO,IAAM,kBAAkB,WAAS;AACtC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AACJ,QAAM;AAAA,IACJ,OAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,IACA,YAAY;AAAA,MACV;AAAA,IACF;AAAA,IACA,WAAW;AAAA,MACT;AAAA,IACF;AAAA,EACF,IAAI,cAAc;AAAA,IAChB,MAAM,WAAW;AAAA,IACjB;AAAA,EACF,CAAC;AACD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,yBAAyB,CAAC;AAC9B,SAAO,mDAAC,eAAa,GAAG,kBAAkB,WAAW,SAChD;AAAA,aAAS,QAAQ,mDAAC,aAAU,SAAS,WAAW,MAAM,IAAI,WAAW,YAAY,YAAY;AAAA,MAC9F,UAAU;AAAA,MACV,IAAI;AAAA,IACN,IAAI,CAAC,GACE,mBAJa;AAAA;AAAA;AAAA;AAAA,WAKhB;AAAA,IACF,mDAAC,cACE;AAAA;AAAA,MACD,mDAAC,SAAO,GAAG,YAAY,UAAoB,OAAc,OAAzD;AAAA;AAAA;AAAA;AAAA,aAAmE;AAAA,SAFrE;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACC,cAAc,QAAQ,mDAAC,kBAAgB,wBAAjB;AAAA;AAAA;AAAA;AAAA,WAA4B;AAAA,OAXhD;AAAA;AAAA;AAAA;AAAA,SAiBL;AACJ;AACA,GAAG,iBAAiB,gCAAgC,OAAO,WAAY;AACrE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,iBAAiB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
