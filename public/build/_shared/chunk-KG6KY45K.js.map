{
  "version": 3,
  "sources": ["../../../src/app/components/SettingsFormHeading.tsx", "../../../src/code.client/app_resources/app_resources.ts", "../../../src/code.client/utils/promise_based_toast.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src/app/components/SettingsFormHeading.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src/app/components/SettingsFormHeading.tsx\");\n  import.meta.hot.lastModified = \"1711474084151.4355\";\n}\n// REMIX HMR END\n\nimport { Button, Flex, Heading, Spacer } from '@chakra-ui/react';\nimport { CommonCard } from './CommonCard';\nexport const SettingsFormHeading = props => {\n  const {\n    title,\n    actionButton\n  } = props;\n  return <CommonCard>\n      <Flex direction={'row'} alignItems={'center'}>\n        <Heading size='md' textTransform='uppercase'>\n          {title}\n        </Heading>\n        {actionButton && <>\n            <Spacer />\n            <Button size={'sm'} colorScheme={'green'} {...actionButton.buttonProps} sx={{\n          textTransform: 'uppercase'\n        }}>\n              {actionButton.label}\n            </Button>\n          </>}\n      </Flex>\n    </CommonCard>;\n};\n_c = SettingsFormHeading;\nvar _c;\n$RefreshReg$(_c, \"SettingsFormHeading\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "import {\n  type AuthDispatch,\n  AuthStateLoggedIn,\n} from 'src/code.client/auth/auth_context';\nimport { DXTError, DXTErrorCode, DXTException } from 'src/domain/shared/errors';\n\nimport { type BasicAppResources, useBasicAppResources } from './basic_app_resources';\n\nexport interface AppResources extends BasicAppResources {\n  authState: AuthStateLoggedIn;\n  authDispatch: AuthDispatch;\n}\n\nexport function useAppResources(): AppResources {\n  const result = useBasicAppResources();\n\n  if (!(result.authState instanceof AuthStateLoggedIn))\n    throw new DXTException(\n      new DXTError(DXTErrorCode.INTERNAL_CLIENT_ERROR, {\n        extra: 'AuthState is not AuthStateLoggedIn',\n      })\n    );\n\n  if (typeof result.authDispatch !== 'function')\n    throw new DXTException(\n      new DXTError(DXTErrorCode.INTERNAL_CLIENT_ERROR, {\n        extra: 'Invalid authDispath in useAppResources()',\n      })\n    );\n\n  return result as AppResources;\n}\n", "import { CreateToastFnReturn } from '@chakra-ui/react';\n\nimport { DXTApiRequestState } from 'src/api-client/shared';\n\ninterface ToastMessages {\n  success: { title: string };\n  error: { title: string };\n  loading: { title: string };\n}\n\ninterface PromiseBasedToastProps {\n  toast: CreateToastFnReturn;\n  result: DXTApiRequestState<any, any>;\n  messages: ToastMessages;\n}\n\nexport const promiseBasedToast = async (props: PromiseBasedToastProps) => {\n  const { toast, result, messages } = props;\n\n  const resultToast = new Promise((resolve, reject) => {\n    result.map({\n      success: () => {\n        resolve(200);\n      },\n      error: (state) => {\n        reject(new Error(state.error.error));\n      },\n    });\n  });\n\n  toast.promise(resultToast, {\n    success: { title: messages.success.title },\n    error: (e) => {\n      return { title: messages.error.title, description: e.message };\n    },\n    loading: {\n      title: messages.loading.title,\n      description: 'Aguarde unos instantes',\n    },\n  });\n\n  return resultToast;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AA6BQ;AA5BR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iDAAmD,EAAE;AAAA,EAC9F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA4C;AAC5C,cAAY,IAAI,eAAe;AACjC;AAKO,IAAM,sBAAsB,WAAS;AAC1C,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI;AACJ,SAAO,mDAAC,cACJ,6DAAC,QAAK,WAAW,OAAO,YAAY,UAClC;AAAA,uDAAC,WAAQ,MAAK,MAAK,eAAc,aAC9B,mBADH;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,IACC,gBAAgB,sFACb;AAAA,yDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,UAAO,MAAM,MAAM,aAAa,SAAU,GAAG,aAAa,aAAa,IAAI;AAAA,QAC9E,eAAe;AAAA,MACjB,GACO,uBAAa,SAHhB;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SANa;AAAA;AAAA;AAAA;AAAA,WAOf;AAAA,OAXJ;AAAA;AAAA;AAAA;AAAA,SAYA,KAbG;AAAA;AAAA;AAAA;AAAA,SAcL;AACJ;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,qBAAqB;AAEtC,OAAO,eAAe;AACtB,OAAO,eAAe;;;AChDtB;AAaO,SAAS,kBAAgC;AAC9C,QAAM,SAAS,qBAAqB;AAEpC,MAAI,EAAE,OAAO,qBAAqB;AAChC,UAAM,IAAI;AAAA,MACR,IAAI,4CAA6C;AAAA,QAC/C,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEF,MAAI,OAAO,OAAO,iBAAiB;AACjC,UAAM,IAAI;AAAA,MACR,IAAI,4CAA6C;AAAA,QAC/C,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEF,SAAO;AACT;;;AC/BA;AAgBO,IAAM,oBAAoB,OAAO,UAAkC;AACxE,QAAM,EAAE,OAAO,QAAQ,SAAS,IAAI;AAEpC,QAAM,cAAc,IAAI,QAAQ,CAAC,SAAS,WAAW;AACnD,WAAO,IAAI;AAAA,MACT,SAAS,MAAM;AACb,gBAAQ,GAAG;AAAA,MACb;AAAA,MACA,OAAO,CAAC,UAAU;AAChB,eAAO,IAAI,MAAM,MAAM,MAAM,KAAK,CAAC;AAAA,MACrC;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,QAAM,QAAQ,aAAa;AAAA,IACzB,SAAS,EAAE,OAAO,SAAS,QAAQ,MAAM;AAAA,IACzC,OAAO,CAAC,MAAM;AACZ,aAAO,EAAE,OAAO,SAAS,MAAM,OAAO,aAAa,EAAE,QAAQ;AAAA,IAC/D;AAAA,IACA,SAAS;AAAA,MACP,OAAO,SAAS,QAAQ;AAAA,MACxB,aAAa;AAAA,IACf;AAAA,EACF,CAAC;AAED,SAAO;AACT;",
  "names": []
}
