{
  "version": 3,
  "sources": ["browser-route-module:root.tsx?browser", "../../src/app/root.tsx", "css-bundle-plugin-ns:@remix-run/css-bundle", "../../src/environment/index.ts", "../../src/app/RootDocument.tsx", "../../src/code.client/contexts/ServerStyleContext.tsx"],
  "sourcesContent": ["export { default, links, meta } from \"./root.tsx\";", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src/app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src/app/root.tsx\");\n}\n// REMIX HMR END\n\nimport { useMemo } from 'react';\nimport { cssBundleHref } from '@remix-run/css-bundle';\nimport { Outlet, useLoaderData } from '@remix-run/react';\nimport { AuthProvider } from '#/auth/auth_context';\nimport { ChakraProvider, cookieStorageManagerSSR, localStorageManager, useConst } from '@chakra-ui/react';\nimport \"@fontsource/roboto/300.css?__remix_sideEffect__\";\nimport \"@fontsource/roboto/400.css?__remix_sideEffect__\";\nimport \"@fontsource/roboto/900.css?__remix_sideEffect__\";\nimport { ModalProvider } from 'react-hooks-async-modal';\nimport { getExecutionModeString } from 'src/environment';\nimport { theme } from '~/theme';\n\n// import { ErrorBox } from './components/ErrorBox';\nimport { RootDocument } from './RootDocument';\nimport \"./styles/index.css?__remix_sideEffect__\";\nexport const loader = async ({\n  request\n}) => {\n  // first time users will not have any cookies and you may not return\n  // undefined here, hence ?? is necessary\n  return request.headers.get('cookie') ?? '';\n};\nexport const links = () => {\n  return [...(cssBundleHref != null ? [{\n    rel: 'stylesheet',\n    href: cssBundleHref\n  }] : [])];\n};\nexport const meta = () => [{\n  charset: 'utf-8'\n}, {\n  name: 'viewport',\n  content: 'width=device-width, initial-scale=1.0, interactive-widget=resizes-content'\n}, {\n  title: getExecutionModeString()\n}];\nexport default function App() {\n  _s();\n  function getColorMode(cookies) {\n    const match = cookies.match(new RegExp(`(^| )${CHAKRA_COOKIE_COLOR_KEY}=([^;]+)`));\n    return match == null ? undefined : match[2];\n  }\n\n  // here we can set the default color mode. If we set it to null,\n  // there's no way for us to know what is the the user's preferred theme\n  // so the cient will have to figure out and maybe there'll be a flash the first time the user visits us.\n  const DEFAULT_COLOR_MODE = theme.config.initialColorMode;\n  const CHAKRA_COOKIE_COLOR_KEY = 'chakra-ui-color-mode';\n  let cookies = useLoaderData();\n\n  // the client get the cookies from the document\n  // because when we do a client routing, the loader can have stored an outdated value\n  if (typeof document !== 'undefined') {\n    cookies = document.cookie;\n  }\n\n  // get and store the color mode from the cookies.\n  // It'll update the cookies if there isn't any and we have set a default value\n  const colorMode = useMemo(() => {\n    let color = getColorMode(cookies);\n    if (color == null && DEFAULT_COLOR_MODE) {\n      cookies += ` ${CHAKRA_COOKIE_COLOR_KEY}=${DEFAULT_COLOR_MODE}`;\n      color = DEFAULT_COLOR_MODE;\n    }\n    return color;\n  }, [cookies]);\n  const cookieManager = useConst(cookieStorageManagerSSR(cookies));\n  return <RootDocument colorMode={colorMode}>\n      <ChakraProvider theme={theme} colorModeManager={typeof cookies === 'string' ? cookieManager : localStorageManager} toastOptions={{\n      defaultOptions: {\n        position: 'bottom',\n        duration: 2500,\n        isClosable: true\n      }\n    }}>\n\n        <ModalProvider>\n          <AuthProvider>\n            <Outlet />\n          </AuthProvider>\n        </ModalProvider>\n      </ChakraProvider>\n    </RootDocument>;\n}\n\n// export function ErrorBoundary() {\n//   return <ErrorBox />;\n// }\n_s(App, \"77jD1pvO266PhhrpHT48ttogFwU=\", false, function () {\n  return [useLoaderData, useConst];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "export const cssBundleHref = \"/build/css-bundle-RWB3XPLB.css\";", "import { isNavigator, isNode } from '@/environemnt';\nimport { enumToString, stringToEnum } from '@/transformation';\n\nimport path from 'path';\nimport { DXTErrorCode, DXTException, getDXTErrorDescription } from 'src/domain/shared/errors';\n\n\ntype ExecutionModeString =  \"development\" | \"production\" | \"test\" | \"beta\"\n\n\nexport enum ExecutionMode {\n  development,\n  test,\n  beta,\n  production,\n}\n\n\nlet _executionMode: ExecutionMode|undefined;\n\nfunction _initEnvironmentConfig() {\n  if (isNavigator()) {\n    const executionModeString: ExecutionModeString|undefined = (window as any)?.dxTangoExecutionMode;\n\n    if (!executionModeString) return ;\n\n    _executionMode = stringToEnum(ExecutionMode, executionModeString);\n\n  }\n\n\n  if (!isNode()) return ;\n  \n  const nodeEnv = process.env.NODE_ENV;\n\n  if (nodeEnv === 'development') {\n    _executionMode = ExecutionMode.development;\n    return;\n  }\n\n  if (nodeEnv === 'test') {\n    _executionMode = ExecutionMode.test;\n    return;\n  }\n\n  const currentDirectory = path.basename(process?.cwd?.()??'').toLowerCase();\n  const isBeta = currentDirectory === 'beta';\n\n  if (isBeta) {\n    _executionMode = ExecutionMode.beta;\n    return;\n  }\n\n  _executionMode = ExecutionMode.production;\n\n}\n\n\nfunction _throwEnvironmentFatalError(): never {\n  if (isNode()) {\n    const errorCode = DXTErrorCode.FATAL_SERVER_INITIALIZATION_ERROR;\n\n    console.error(getDXTErrorDescription(errorCode));\n\n    process.exit(errorCode);\n  }\n\n  throw new DXTException(DXTErrorCode.FATAL_CLIENT_INITIALIZATION_ERROR);\n}\n\n\nexport function getExecutionMode(): ExecutionMode {\n  if (_executionMode === undefined) {\n    _initEnvironmentConfig();\n    if (_executionMode === undefined)  _throwEnvironmentFatalError();\n  }\n\n  return _executionMode;  \n}\n\nexport function getExecutionModeString(): string {\n  const executionMode = getExecutionMode();\n\n  return enumToString(ExecutionMode, executionMode);\n}\n\nexport function isDevelopment(): boolean {\n  return getExecutionMode() === ExecutionMode.development;\n}\n\nexport function isBeta(): boolean {\n  return  getExecutionMode() === ExecutionMode.beta;\n}\n\nexport function isProduction(): boolean {\n  return getExecutionMode() === ExecutionMode.production;\n}\n\nexport function isTest(): boolean {\n  return getExecutionMode() === ExecutionMode.test;\n}\n\n\nexport function byEnv<T>(options: {\n  dev?: T;\n  beta?: T;\n  prod?: T;\n  test?: T;\n  orElse: T;\n}): T {\n  const { dev, beta, test, prod, orElse } = options;\n  const executionMode = getExecutionMode();\n\n  switch (executionMode) {\n    case ExecutionMode.production: if (prod != null) return prod; break;\n    case ExecutionMode.beta: if (beta != null) return beta; break;\n    case ExecutionMode.test: if (test != null) return test; break;\n    \n    default: if (dev != null) return dev;\n  }\n\n  return orElse;\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"src/app/RootDocument.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"src/app/RootDocument.tsx\");\n  import.meta.hot.lastModified = \"1708453660122.2415\";\n}\n// REMIX HMR END\n\nimport { useContext, useEffect } from 'react';\nimport { Links, LiveReload, Meta, Scripts, ScrollRestoration } from '@remix-run/react';\nimport { withEmotionCache } from '@emotion/react';\nimport { ClientStyleContext, ServerStyleContext } from '../code.client/contexts/ServerStyleContext';\nexport const RootDocument = _s(withEmotionCache(_c = _s(({\n  children,\n  colorMode\n}, emotionCache) => {\n  _s();\n  const serverStyleData = useContext(ServerStyleContext);\n  const clientStyleData = useContext(ClientStyleContext);\n\n  // Only executed on client\n  useEffect(() => {\n    // re-link sheet container\n    emotionCache.sheet.container = document.head;\n    // re-inject tags\n    const tags = emotionCache.sheet.tags;\n    emotionCache.sheet.flush();\n    tags.forEach(tag => {\n      emotionCache.sheet._insertTag(tag);\n    });\n    // reset cache to reapply global styles\n    clientStyleData?.reset();\n  }, []);\n  return <html lang='es' {...colorMode != null && {\n    'data-theme': colorMode,\n    style: {\n      colorScheme: colorMode\n    }\n  }}>\n        <head>\n          <Meta />\n          <Links />\n          {serverStyleData?.map(({\n        key,\n        ids,\n        css\n      }) => <style key={key} data-emotion={`${key} ${ids.join(' ')}`} dangerouslySetInnerHTML={{\n        __html: css\n      }} />)}\n        </head>\n        <body {...colorMode != null && {\n      className: `chakra-ui-${colorMode}`\n    }}>\n          {children}\n          <ScrollRestoration />\n          <Scripts />\n          <LiveReload />\n        </body>\n      </html>;\n}, \"vFrPjx9OU/CyW6kig5dfFtYNdnQ=\")), \"vFrPjx9OU/CyW6kig5dfFtYNdnQ=\");\n_c2 = RootDocument;\nvar _c, _c2;\n$RefreshReg$(_c, \"RootDocument$withEmotionCache\");\n$RefreshReg$(_c2, \"RootDocument\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// context.tsx\nimport { createContext } from 'react';\n\nexport interface ServerStyleContextData {\n  key: string;\n  ids: string[];\n  css: string;\n}\n\nexport const ServerStyleContext = createContext<\n  ServerStyleContextData[] | null\n>(null);\n\nexport interface ClientStyleContextData {\n  reset: () => void;\n}\n\nexport const ClientStyleContext = createContext<ClientStyleContextData | null>(\n  null\n);\n"],
  "mappings": "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",
  "names": ["import_react", "ExecutionMode", "import_react", "import_jsx_dev_runtime", "_s", "_s", "cookies", "_c"]
}
